// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using Azure.Core;

namespace Core.Models
{
    public partial class MessageBase
    {
        internal static MessageBase DeserializeMessageBase(JsonElement element)
        {
            Optional<int> merchantId = default;
            Optional<MessageTargets> targets = default;
            Optional<string> authToken = default;
            Optional<DateTimeOffset?> published = default;
            Optional<string> messageId = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("MerchantId"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    merchantId = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("Targets"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    targets = MessageTargets.DeserializeMessageTargets(property.Value);
                    continue;
                }
                if (property.NameEquals("AuthToken"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        authToken = null;
                        continue;
                    }
                    authToken = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("Published"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        published = null;
                        continue;
                    }
                    published = property.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (property.NameEquals("MessageId"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        messageId = null;
                        continue;
                    }
                    messageId = property.Value.GetString();
                    continue;
                }
            }
            return new MessageBase(Optional.ToNullable(merchantId), targets.Value, authToken.Value, Optional.ToNullable(published), messageId.Value);
        }
    }
}
